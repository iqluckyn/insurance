package com.iql.policyadmin.domain;

import static com.iql.policyadmin.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QuotationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllPropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationAutoGeneratedPropertiesEquals(expected, actual);
        assertQuotationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAllUpdatablePropertiesEquals(Quotation expected, Quotation actual) {
        assertQuotationUpdatableFieldsEquals(expected, actual);
        assertQuotationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationAutoGeneratedPropertiesEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableFieldsEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation relevant properties")
            .satisfies(e -> assertThat(e.getStartOfRiskPeriod()).as("check startOfRiskPeriod").isEqualTo(actual.getStartOfRiskPeriod()))
            .satisfies(e -> assertThat(e.getLengthOfRiskPeriod()).as("check lengthOfRiskPeriod").isEqualTo(actual.getLengthOfRiskPeriod()))
            .satisfies(e -> assertThat(e.getDepth()).as("check depth").isEqualTo(actual.getDepth()))
            .satisfies(e -> assertThat(e.getClaimsFrequency()).as("check claimsFrequency").isEqualTo(actual.getClaimsFrequency()))
            .satisfies(
                e ->
                    assertThat(e.getInsuredValue())
                        .as("check insuredValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getInsuredValue())
            )
            .satisfies(
                e ->
                    assertThat(e.getBestPremium())
                        .as("check bestPremium")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBestPremium())
            )
            .satisfies(
                e ->
                    assertThat(e.getInsuredRate())
                        .as("check insuredRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getInsuredRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getInsuredPremium())
                        .as("check insuredPremium")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getInsuredPremium())
            )
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuotationUpdatableRelationshipsEquals(Quotation expected, Quotation actual) {
        assertThat(expected)
            .as("Verify Quotation relationships")
            .satisfies(e -> assertThat(e.getSeason()).as("check season").isEqualTo(actual.getSeason()))
            .satisfies(e -> assertThat(e.getFarmer()).as("check farmer").isEqualTo(actual.getFarmer()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getBusiness()).as("check business").isEqualTo(actual.getBusiness()))
            .satisfies(e -> assertThat(e.getQuotationStatus()).as("check quotationStatus").isEqualTo(actual.getQuotationStatus()));
    }
}
