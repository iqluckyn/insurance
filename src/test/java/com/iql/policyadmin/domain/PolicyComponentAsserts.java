package com.iql.policyadmin.domain;

import static com.iql.policyadmin.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PolicyComponentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyComponentAllPropertiesEquals(PolicyComponent expected, PolicyComponent actual) {
        assertPolicyComponentAutoGeneratedPropertiesEquals(expected, actual);
        assertPolicyComponentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyComponentAllUpdatablePropertiesEquals(PolicyComponent expected, PolicyComponent actual) {
        assertPolicyComponentUpdatableFieldsEquals(expected, actual);
        assertPolicyComponentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyComponentAutoGeneratedPropertiesEquals(PolicyComponent expected, PolicyComponent actual) {
        assertThat(expected)
            .as("Verify PolicyComponent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyComponentUpdatableFieldsEquals(PolicyComponent expected, PolicyComponent actual) {
        assertThat(expected)
            .as("Verify PolicyComponent relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getComponentValue())
                        .as("check componentValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getComponentValue())
            )
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyComponentUpdatableRelationshipsEquals(PolicyComponent expected, PolicyComponent actual) {
        assertThat(expected)
            .as("Verify PolicyComponent relationships")
            .satisfies(e -> assertThat(e.getComponent()).as("check component").isEqualTo(actual.getComponent()))
            .satisfies(e -> assertThat(e.getPolicies()).as("check policies").isEqualTo(actual.getPolicies()));
    }
}
