package com.iql.policyadmin.domain;

import static com.iql.policyadmin.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PolicyClaimAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyClaimAllPropertiesEquals(PolicyClaim expected, PolicyClaim actual) {
        assertPolicyClaimAutoGeneratedPropertiesEquals(expected, actual);
        assertPolicyClaimAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyClaimAllUpdatablePropertiesEquals(PolicyClaim expected, PolicyClaim actual) {
        assertPolicyClaimUpdatableFieldsEquals(expected, actual);
        assertPolicyClaimUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyClaimAutoGeneratedPropertiesEquals(PolicyClaim expected, PolicyClaim actual) {
        assertThat(expected)
            .as("Verify PolicyClaim auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyClaimUpdatableFieldsEquals(PolicyClaim expected, PolicyClaim actual) {
        assertThat(expected)
            .as("Verify PolicyClaim relevant properties")
            .satisfies(e -> assertThat(e.getClaimNumber()).as("check claimNumber").isEqualTo(actual.getClaimNumber()))
            .satisfies(e -> assertThat(e.getClaimDate()).as("check claimDate").isEqualTo(actual.getClaimDate()))
            .satisfies(
                e ->
                    assertThat(e.getAmountClaimed())
                        .as("check amountClaimed")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAmountClaimed())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPolicyClaimUpdatableRelationshipsEquals(PolicyClaim expected, PolicyClaim actual) {
        assertThat(expected)
            .as("Verify PolicyClaim relationships")
            .satisfies(e -> assertThat(e.getPolicy()).as("check policy").isEqualTo(actual.getPolicy()));
    }
}
