package com.iql.policyadmin.domain;

import static com.iql.policyadmin.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InsuredPolicyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuredPolicyAllPropertiesEquals(InsuredPolicy expected, InsuredPolicy actual) {
        assertInsuredPolicyAutoGeneratedPropertiesEquals(expected, actual);
        assertInsuredPolicyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuredPolicyAllUpdatablePropertiesEquals(InsuredPolicy expected, InsuredPolicy actual) {
        assertInsuredPolicyUpdatableFieldsEquals(expected, actual);
        assertInsuredPolicyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuredPolicyAutoGeneratedPropertiesEquals(InsuredPolicy expected, InsuredPolicy actual) {
        assertThat(expected)
            .as("Verify InsuredPolicy auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuredPolicyUpdatableFieldsEquals(InsuredPolicy expected, InsuredPolicy actual) {
        assertThat(expected)
            .as("Verify InsuredPolicy relevant properties")
            .satisfies(e -> assertThat(e.getPolicyNumber()).as("check policyNumber").isEqualTo(actual.getPolicyNumber()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(
                e ->
                    assertThat(e.getPremiumAmount())
                        .as("check premiumAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPremiumAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getCoverageAmount())
                        .as("check coverageAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCoverageAmount())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInsuredPolicyUpdatableRelationshipsEquals(InsuredPolicy expected, InsuredPolicy actual) {
        assertThat(expected)
            .as("Verify InsuredPolicy relationships")
            .satisfies(e -> assertThat(e.getInsuredFarmer()).as("check insuredFarmer").isEqualTo(actual.getInsuredFarmer()))
            .satisfies(e -> assertThat(e.getFarm()).as("check farm").isEqualTo(actual.getFarm()))
            .satisfies(e -> assertThat(e.getComponents()).as("check components").isEqualTo(actual.getComponents()))
            .satisfies(e -> assertThat(e.getQuotation()).as("check quotation").isEqualTo(actual.getQuotation()));
    }
}
